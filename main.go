package main

import (
	"fmt"
	"github.com/iris-contrib/swagger/v12"
	"github.com/iris-contrib/swagger/v12/swaggerFiles"
	"github.com/kataras/iris/v12"
	"github.com/kataras/iris/v12/middleware/pprof"
	"iris-demo-new/config"
	_ "iris-demo-new/docs" // docs is generated by Swag CLI, you have to import it.
	"iris-demo-new/middleware"
	"iris-demo-new/router"
	"iris-demo-new/slog"
	"os"
	"path"
)

// @title Iris Demo
// @version 1.0.0
// @description Iris Demo
func main()  {
	//define application
	api := newApp()

	//startup service, request root url, like http://127.0.0.1:9537
	err := api.Run(iris.Addr(fmt.Sprintf("%s:%d", config.Setting.App.BindAddress, config.Setting.App.Port)))
	if err != nil {
		api.Logger().Print("Server failed to start")
	}
}

func newApp() *iris.Application {
	// register application to controller
	api := iris.New()
	router.InitApp(api)
	// get root path
	currentDir, _ := os.Getwd()
	configFile := path.Join(currentDir, "config", "config.yml")
	//initiate configuration
	config.Init(configFile)
	if config.Setting.App.Debug {
		p := pprof.New()
		api.Get("/debug/pprof", p)
		api.Get("/debug/pprof/{action:path}", p)
		api.Logger().SetLevel("debug")
	} else {
		api.Logger().SetLevel("error")
	}
	api.Configure(iris.WithConfiguration(config.Setting.Iris))
	//output global error handling
	api.OnAnyErrorCode(func(ctx iris.Context) {
		err := iris.Map{
			"code": ctx.GetStatusCode(),
			"message": ctx.Values().GetString("message"),
			"data": nil,
		}
		_, _ = ctx.JSON(err)
	})
	// register logger
	slog.InitLogger(config.Setting.Log, api)

	//add swagger
	//first run command 'swag init', then request swagger api, like http://127.0.0.1:9537/swagger/index.html
	swaggerConfig := &swagger.Config{
		URL: fmt.Sprintf("http://%s:%d/swagger/doc.json", config.Setting.App.BindAddress, config.Setting.App.Port),
	}
	//use global middleware
	api.Get("/swagger/{any:path}", swagger.CustomWrapHandler(swaggerConfig, swaggerFiles.Handler))
	api.UseGlobal(middleware.IrisRequestHandler)
	return api
}
